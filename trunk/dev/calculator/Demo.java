import org.nees.calculate.expression.Expression;import org.nees.calculate.numberList.NumberList;import org.nees.calculate.base.Base;public class Demo {	public static void main(String args[]) {new Demo();}		public Demo()	{		Expression c;		String exp;				// expressions can use channels c0, c1, and c2 (see evaluation, below)//		exp = "(c0 + c1) * max(100,c1) + min(cos(c1), sin(c0));";		exp = "((c0>250.0)?(c1+c2):(c2-c1)) + max(c0,5.0);";  				try {			// build the parse tree (see ./doc/index.html)			c = new Expression(new java.io.BufferedReader(new java.io.StringReader(exp)));			c.setup();			// uncomment this line to print the evaluation tree			// c.printTree(); 		} catch (Exception pe)		{			System.out.println("With expression = " + exp);			System.out.println("the Parse failed, try another expression...");			pe.printStackTrace();			return;		}		// uncomment this line to see a trace of the expression evaluation		// Base.trace = true;		double base = 10.0;		int loops = 1		for (int i = 0; i < loops; i ++)		{			// compute values for the "channels" and evaluate the expression			try{							// set the values for the "channels" c0, c1, c2				double[] values = {base, base + 5.0, base + 10.0};				c.setValues(values);				base += 20.0;								System.out.print("  values = " + c.values[0]);				for (int j = 1; j < c.values.length; j++)					System.out.print(", " + c.values[j]);				System.out.println();				System.out.println("  expression = " + exp);				// evaulate the expression with the values in 'values'				System.out.println("  expresion value  = " + c.eval());				System.out.println();			} catch (Exception e)			{				System.out.println("Oops.");				System.out.println(e.getMessage());				e.printStackTrace();				continue;			}		} // for values	} // constructor} // Demo