This directory tree is for building a expression ealuvtor. The ant tasksare:	ant - (defaults to 'ant build') to build the classes directory and		compile it to build/classes (intermediate files are generated		in build/gen)	ant clean - deletes all generated files	ant jar - builds a jar file from the compiled files in build/classes		and does 'ant build' if necessary; the jar file is writen to		build/lib and is called calculator.jar	the resulting jar file contians the class	org.nees.rbnb.Expression (see Test.java for an example of how		it is used... and here)			with calcularot.jar on your class path,	to see a description of the expression grammer		java org.nees.calculator.Expression	The pubic methods of this class (org.nees.calculator.Expression),can be used to evaluate an expression over a set of "clannel"values. For example...import org.nees.calculate.base.ExpressionInputStream;import org.nees.calculate.expression.Expression;import org.nees.calculate.numberList.NumberList;import org.nees.calculate.base.Base;public class Demo {	public static void main(String args[]) {new Demo();}		public Demo()	{		Expression c;		String exp;		exp = "(c0 + c1)/(100 * c0/c1);";  				try {			c = new Expression(new ExpressionInputStream(exp));			c.setup();		} catch (Exception pe)		{			System.out.println("With expression = " + exp);			System.out.println("the Parse failed, try another expression...");			return;		}		// uncomment this line to print the evaluation tree		// c.printTree(); 		// uncomment this line to see a trace of the expression evaluation		// Base.trace = true;		double base = 10.0;		for (int i = 0; i<10; i ++)		{			// compute values for the "channels" and evaluate the expression			try{							double[] values = {base, base + 5.0, base + 10.0};				base += 20.0;				c.setValues(values);				System.out.print("  values = " + c.values[0]);				for (int j = 1; j < c.values.length; j++)					System.out.print(", " + c.values[j]);				System.out.println();				System.out.println("  expression = " + exp);				System.out.println("  expresion value  = " + c.eval());				System.out.println();			} catch (Exception e)			{				System.out.println("Oops.");				System.out.println(e.getMessage());				e.printStackTrace();				continue;			}		} // for values	} // constructor} // Demo