/*
 * ImageRepositroyViewer.java
 * Created on Feb 24, 2005
 * 
 * COPYRIGHT © 2005, THE REGENTS OF THE UNIVERSITY OF MICHIGAN,
 * ALL RIGHTS RESERVED; see the file COPYRIGHT.txt in this folder for details
 * 
 * This work is supported in part by the George E. Brown, Jr. Network
 * for Earthquake Engineering Simulation (NEES) Program of the National
 * Science Foundation under Award Numbers CMS-0117853 and CMS-0402490.
 * 
 * CVS information...
 *   $Revision: 153 $
 *   $Date: 2007-09-24 13:10:37 -0700 (Mon, 24 Sep 2007) $
 *   $RCSfile: ImageRepositoryViewer.java,v $ 
 * 
 */
package org.nees.tivo;

import org.nees.rbnb.RBNBBase;
import org.nees.rbnb.ArchiveUtility;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import org.apache.commons.cli.Options;
import org.apache.commons.cli.CommandLine;

import javax.swing.Timer;

import java.util.Vector;
import java.util.TimeZone;
import java.text.SimpleDateFormat;

import java.io.File;

/**
 * Presents a GUI for browsing a given image archive in the form generated by
 * org.nees.rbnb.JpgSaverSink.
 * 
 * @author Terry E Weymouth
 * @see org.nees.rbnb.JgpSaverSink
 */
public class ImageRepositoryViewer extends RBNBBase {

    protected static final SimpleDateFormat DATE_FORMAT =
        new SimpleDateFormat("MMM d, yyyy h:mm:ss.SSS aa");
    private static final TimeZone TZ = TimeZone.getTimeZone("GMT");
    static {
        DATE_FORMAT.setTimeZone(TZ);
    }

    Vector viewerList = new Vector();
    Archive originalArchive;
    ViewerArchiveCover archiveCover;

    // used by capture segment command
    int lastSinkNumber = 0;

    ImageRepositoryViewer()
    {
        System.out.println("ImageRepositoryViewer starting...");
        System.out.println(getCVSVersionString());
        System.out.println("Using ArchiveUtility with...");
        System.out.println(ArchiveUtility.getCVSVersionString());
    }
    
    private String getCVSVersionString()
    {
        return
            "ImageRepositoryViewer CVS information... \n" +
            "  $Revision: 153 $\n" +
            "  $Date: 2007-09-24 13:10:37 -0700 (Mon, 24 Sep 2007) $\n" +
            "  $RCSfile: ImageRepositoryViewer.java,v $ \n";
    }
    
    protected Options setOptions() {
        Options opt = setBaseOptions(new Options()); // uses h, s, p
        opt.addOption(
            "a",
            true,
            "Archive base directory path (defaults to "
                + Archive.DEFAULT_ARCHIVE_NAME
                + ")");
        return opt;
    }

    protected boolean setArgs(CommandLine cmd) {

        if (!setBaseArgs(cmd))
            return false;
        System.out.println(
            "Use ImageRepositoryViewer -h to see optional parameters");

        String archivePath = Archive.DEFAULT_ARCHIVE_NAME;
        // args for archive: base path

        if (!setArchiveFromPath(archivePath)) {
            System.out.println(
                "Problem with args: bad archive name or no archive.");
            return false;
        }

        System.out.println("Starting with Archive at "
            + originalArchive.getBaseDir().getAbsolutePath()
            + "; version = " + originalArchive.version);

        return true;
    }

    private boolean setArchiveFromPath(String archivePath) {
        System.out.println("Archive path = " + archivePath);
        try {
            originalArchive = new Archive(archivePath);
            if (checkOriginalArchive(archivePath))
                return true;
        } catch (Throwable t) {
            t.printStackTrace();
            System.out.println(
                "Problem with Archive. "
                    + "Setting archive to null. Archive path = "
                    + archivePath);
            originalArchive = null;
        }

        return (originalArchive != null);
    }

    private boolean checkOriginalArchive(String archivePath) {
        if (originalArchive == null)
            return false;
        if (originalArchive.getSegmentsVector().size() == 0) {
            System.out.println("Empty archive is ok.");
            return true;
        } else {
            try {
                // check archive for integrety
                ArchiveSegmentInterface[] a =
                    originalArchive.getSegmentsArray();
                for (int i = 0; i < a.length; i++) {
                    long probe = a[i].getStartTime();
                    ArchiveItemInterface test = a[i].getAtOrAfter(probe);
                    long time = test.getTime();
                    if (time == 0) {
                        System.out.println(
                            "Problem with Archive integrety. "
                                + "Setting archive to null. Archive path = "
                                + archivePath);
                        originalArchive = null;
                    }
                }
                for (int i = 0; i < a.length; i++) {
                    long probe = a[i].getEndTime();
                    ArchiveItemInterface test = a[i].getAtOrBefore(probe);
                    long time = test.getTime();
                    if (time == 0) {
                        System.out.println(
                            "Problem with Archive integrety. "
                                + "Setting archive ot null. Archive path = "
                                + archivePath);
                        originalArchive = null;
                    }
                }
            } catch (Throwable t) {
                t.printStackTrace();
                System.out.println(
                    "Problem with Archive integrety. "
                        + "Setting archive ot null. Archive path = "
                        + archivePath);
                originalArchive = null;
            }
        }
        return (originalArchive != null);
    }

    private void setNameAndPort(String name, String port) {
        this.setServerName(name);
        this.setServerPort(port);
    }

    public static void main(String[] args) {

        final ImageRepositoryViewer irv = new ImageRepositoryViewer();
        if (!irv.parseArgs(args))
            return;

        // Schedule a job for the event-dispatching thread:
        // create and show this application's GUI; start the applicaiton
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                irv.bootstrap();
            }
        });
    }

    private void bootstrap() {
        archiveCover = new ViewerArchiveCover(originalArchive);
        startNewViewer(null);
    }

    protected void startNewViewer(ViewerSegmentHolder seg) {
        viewerList.addElement(new Viewer(this, seg, archiveCover));
    }

    protected void topLevelExit(Viewer v) {
        viewerList.removeElement(v);
        if (viewerList.size() == 0)
            System.exit(0);
    }

}
