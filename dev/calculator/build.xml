<?xml version="1.0"?>

<project default="usage" basedir=".">

	<property name="package.name" value="calculate" />
	
	<!-- Source code directory tree -->
	<property name="src.dir" value="src"/>
	
	<!-- Build directory tree -->
	<property name="commonlib.dir" value="../common/lib" />
	<property name="lib.dir" value="lib" />
	<property name="build.dir" value="build"/>
	<property name="build.classes" value="${build.dir}/classes"/>
	<property name="build.lib" value="${build.dir}/lib"/>
	<property name="build.gen" value="${build.dir}/gen"/>
	<property name="build.gen.base" value="${build.gen}/org/nees/calculate"/>
	
	<!-- environment access via env.* -->
	<property environment="env"/>
	
	<!-- location of needed resoures -->
	<property name="rbnb.home" value="${env.RBNB_HOME}"/>
	<property name="turbine.home" value="${env.TURBINE_HOME}"/>
	
	<!-- usage -->
	<target  name="usage" description="What are the tragets in this build file" >
	<echo>
	The main targets for this ant file are:
		clean - removes all generated java and class files
			(removes the build dir)
		clean.jar - removed the yar file generated by install
		build - creates the build dir (if needed), generate
			all the java files, and compile all class files
		jar - generate the jar file into ${build.lib}
		install - clean, build, jar, copy the jar file to 
			${lib.dir}, 
			and delete all generated files;
			when an error occures, leaves the existing jar
			file intact
		check.this.jar - checks to see if the jar file is
			available in ${lib.dir}
	</echo>
	</target>
	
	<!-- classpath -->
	<path id="classpath">
		<pathelement location="."/>
		<pathelement location="${build.classes}"/>
		<pathelement path="${java.class.path}"/>
		<fileset dir="${build.lib}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${commonlib.dir}">
			<include name="*.jar" />
		</fileset>
	</path>
	
	<!-- target to make temp dirs and set up files for processing -->
	<target name="prepare" description="Make directories">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.classes}"/>
		<mkdir dir="${build.lib}"/>
		<mkdir dir="${build.gen}"/>
		<copy toDir="${build.gen}">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
				<include name="**/*.jjt" />
			</fileset>
		</copy>
	</target>
	
	<!-- target to clean build dir -->
	<target name="clean" description="Remove all generated files">
		<delete dir="${build.dir}"/>
	</target>
	<target name="clean.jar" description="Remove installed jar file">
		<delete file="${lib.dir}/${package.name}.jar" />
	</target>
	
	<!-- Build target -->
	<target name="build" depends="javacc" description="Build from source">
		<javac srcdir="${build.gen}"
	        destdir="${build.classes}"
	        classpathref="classpath" debug="on">
		</javac>
	</target>

	<!-- NOTE ***** NOTE **** NOTE **** NOTE
		At the time that this was written (January 17, 2005) the ant tasks
		jjtree and javacc could not be made to work because the only JavaCC.zip
		that I could find used an older version of javacc (version 3.4) which
		generated code that had enum as a variable name; enum is a reserved word
		in java 5.		
 	 	 NOTE ***** NOTE **** NOTE **** NOTE
	-->
	
	<target name="jjtree" depends="prepare">
        <java classname="jjtree" fork="yes">
    			<arg line="-OUTPUT_DIRECTORY:${build.gen.base}/expression/ ${build.gen.base}/expression/Expression.jjt" />
    		</java>
        <java classname="jjtree" fork="yes">
    			<arg line="-OUTPUT_DIRECTORY:${build.gen.base}/numberList ${build.gen.base}/numberList/NumberList.jjt" />
    		</java>
    </target>
    <target name="javacc" depends="jjtree">
        <java classname="javacc" fork="yes">
    			<arg line="-OUTPUT_DIRECTORY:${build.gen.base}/expression/ ${build.gen.base}/expression/Expression.jj" />
    		</java>
        <java classname="javacc" fork="yes">
    			<arg line="-OUTPUT_DIRECTORY:${build.gen.base}/numberList ${build.gen.base}/numberList/NumberList.jj" />
    		</java>
    </target>

	<!-- Package (jar) target -->
	<target name="jar" depends="build" description="Build package jar file">
	  <jar 
	  	jarfile="${build.lib}/${package.name}.jar" 
	  	basedir="${build.classes}"
	  	manifest="${src.dir}/manifest.txt"
	  />
	</target>
	
	<!-- Target to generate the grammer documentation -->
	<target name="doc" description="generate the grammer description">
		<!-- note jjdoc is a tag available in ant 1.6 only -->
		<available file="${build.gen.base}/expression/Expression.jj" property="this.ex.jj.ok"/>
		<fail message="Expression.jj not found (run 'ant build', first)."
			 unless="this.ex.jj.ok"/>
		<java classname="jjdoc">
			<arg line="-OUTPUT_FILE:doc/Expression.html ${build.gen.base}/expression/Expression.jj" />
		</java>
	</target>
	
	<!-- Catch-all targets to aggregate everything -->
	<target name="all" depends="clean,jar" description="clean, compile, jar" />
	<target name="copy.jar" depends="all">
		<copy toDir="${lib.dir}" file="${build.lib}/${package.name}.jar"/>
	</target>
	<target name="install" depends="copy.jar"
				description="clean, create and copy jar, remove all generated files" >
		<delete dir="${build.dir}"/>
	</target>
	
	<target name="check.this.jar">
		<available file="${lib.dir}/${package.name}.jar" property="this.jar.ok"/>
		<fail message="Jar not found (run ant install)." unless="this.jar.ok"
		/>
	</target>

</project>
