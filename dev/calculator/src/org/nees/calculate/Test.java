package org.nees.calculate;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.StringReader;import java.util.Vector;import org.nees.calculate.expression.Expression;import org.nees.calculate.numberList.NumberList;public class Test{	int[] baseValues;	  public static void main(String args[]) {  	new Test();  }    public Test()  {	BufferedReader in = new BufferedReader(new InputStreamReader(System.in));  	while (true)  	{  		Expression c;  		String exp;  				try { // get an expression tree			System.out.println("Enter an expression to evaluate... ");			System.out.println("   operators are +, -, *, /, (<exp>)");			System.out.println("   channel numbers are c0, c1, c2, etc.");			System.out.println("   expressions end with a semi-colon, ; ");			System.out.println("   for example: (c0 + c1)/(100 * c0/c1);");			System.out.println("   (to exit, enter an empty line)");			System.out.println(" ----- ");			exp = in.readLine();			if (exp.length() == 0) break;			c = new Expression(new java.io.BufferedReader(new java.io.StringReader(exp)));	  		c.setup();	  	} catch (Exception pe)	  	{	  		System.out.println(pe.getMessage());	  		System.out.println("Try another expression...");	  		continue;	  	}	  		  	while (true)  // get values and evaluate the channel numbers	  	{	  		try{				System.out.println("Enter values for the channels...");				System.out.println("as a comma-seperated list of numbers");				System.out.println("(or an empty line to enter a new expression)");				String inLine = in.readLine();				if (inLine.length() == 0) break;				NumberList nl = 					new NumberList(						new java.io.BufferedReader(							new java.io.StringReader(inLine)));				double[] values = nl.value();				c.setValues(values);		  	  	System.out.print("  values = " + c.values[0]);  			  	for (int i = 1; i < c.values.length; i++)		  	  		System.out.print(", " + c.values[i]);  				System.out.println();  				System.out.println("  expression = " + exp);  				  		System.out.println("  expresion value  = " + c.eval());		  	} catch (Exception e)		  	{				System.out.println("Oops.");				System.out.println(e.getMessage());			    e.printStackTrace();			    continue;			}  		} // get values  	} // get expressions  } // main}